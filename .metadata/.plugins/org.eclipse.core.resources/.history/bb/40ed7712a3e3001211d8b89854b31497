import java.util.ArrayList;

public class Wordlist {
	String[][] words; // two dimensional array so we can organize the wordlist
						// by length. Row will be the length, which organizes
						// the columns to be the words
	
	ArrayList<String> used;

	String[] wordlist;

	public Wordlist(String[] word) {
		words = new String[28][];
		wordlist = word;
		this.used = new ArrayList<String>();
		this.loadWords();
		

	}

	private void loadWords() { // We want it to be as fast
								// as possible AFTER being
								// loaded; we don't really
								// care about load times, so it's viable to
								// first load the words into a regular array

		ArrayList<ArrayList<String>> word = new ArrayList<ArrayList<String>>(28); // creates
																					// a
																					// two
																					// dimensional
																					// arraylist
		for (int x = 0; x < 28; x++) {
			ArrayList<String> newlist = new ArrayList<String>();
			word.add(newlist);
		}
		for (String x : wordlist) {

			word.get(x.length() - 1).add(x); // adds the word to the correct
												// location
		}

		for (int x = 0; x < 28; x++) { // for every list of strings, after the
										// words have been loaded, put it into a
										// new two dimensional array
			
			this.words[x] = word.get(x).toArray(new String[0]);
			
			

		}

	}

	public String findWord(String match) { // find the indexth word that matches
											// the
											// incident string, where '?'
											// represents an unknown letter.
											// For example, ?PPL? would match
											// APPLE

		System.out.println("Matching " + match);
		boolean found = true;
		for (int s = 0; s < this.words[match.length() - 1].length; s++) {
			String str = this.words[match.length() - 1][s];
			for (int x = 0; x < match.length(); x++) {
				if (match.charAt(x) == '?') {

					continue;
				}
				if (match.charAt(x) != str.charAt(x)) {
					found = false;
					break;
				}

			}
			System.out.println(this.used);
			System.out.println(str);
			if (found) {
				if(this.used.contains(str)) {
					continue;
				}
				else{
					this.used.add(str);
					return str;
				}
			}
			found = true;

		}
		return null;

	}
}
