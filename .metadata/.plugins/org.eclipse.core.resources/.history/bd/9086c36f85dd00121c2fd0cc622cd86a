
public class Trie { //prefix trie for storing dictionary
	Trie parent; //trie that's one higher
	Trie[] subtries;
	boolean endofWord;
	int height; //records the height of the prefix trie;
	
	public Trie() {
		parent = null;
		subtries = new Trie[26]; //26 letters
		endofWord = false;
		height = 1;
	}
	public Trie(Trie t) {//create a new trie that has a parent
		parent = t;
		subtries = new Trie[26]; //26 letters
		endofWord = false;
	}
	
	private int findHeight(Trie root) {
)
		int maxheight = 1;
		for(Trie t: root.subtries) {
			if(t == null) {
				continue;
			}
			findHeight(t);
			
		}
		return 0;
	}
	public void insert(String s) { //inserts String into root trie;
		s = s.toUpperCase();
		Trie root = this;
		for(int x = 0; x < s.length(); x++) {
			if(root.subtries[s.charAt(x)-'A'] == null) {
				root.subtries[s.charAt(x)-'A'] = new Trie(root);
				
			}
			root = root.subtries[s.charAt(x)- 'A']; //go down one path
		}
		
		root.endofWord = true; //mark it as the end of the word	
			
		
		
	}
	
	public boolean search(String s) {// returns true if the String is found
		s = s.toUpperCase();
		Trie root = this;
		for(int x = 0; x < s.length(); x++) {
			if(root.subtries[s.charAt(x)-'A'] == null) {
				return false;
			}
			root = root.subtries[s.charAt(x)- 'A'];
			
		}
		return root.endofWord;
	}
	
	
	
	
	public static void main(String[] args) {
		Trie t = new Trie();
		t.insert("HELLO");
		System.out.println(t.search("hello"));
		System.out.println(t.search("goodbye"));
		
	}
	
}
