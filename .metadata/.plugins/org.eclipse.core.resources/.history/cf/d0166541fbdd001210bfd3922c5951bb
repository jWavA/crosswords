public class Trie { // prefix trie for storing dictionary
	Trie parent; // trie that's one higher
	Trie[] subtries;
	boolean endofWord;
	boolean used; // specific to our problem: already used words will be placed
					// here.
	int height;// keeps track of the height of the trie;

	public Trie() {
		parent = null;
		subtries = new Trie[26]; // 26 letters
		endofWord = false;
	}

	public Trie(Trie t) {// create a new trie that has a parent
		parent = t;
		subtries = new Trie[26]; // 26 letters
		endofWord = false;
	}

	private void updateHeights() {
		this.height = findHeight(this, 0);
		for (Trie t : subtries) {
			if (t == null)
				continue;
			t.updateHeights();
		}
	}

	private static int findHeight(Trie t, int currentHeight) {
		int maxHeight = currentHeight; // assume the maximum height is the
										// current height of the object
		for (int x = 0; x < 26; x++) {
			if (t.subtries[x] == null)
				continue;
			int subHeight = findHeight(t.subtries[x], currentHeight + 1); // the
																			// height
																			// of
																			// this
																			// subtrie;
			if (subHeight > maxHeight)
				maxHeight = subHeight;
		}
		// if we've reached the maximum height allowed by this trie, return this
		// value
		return maxHeight;
	}

	private int scanRow(Trie t, int height, int index) { // scans a single
															// layer for the
															// indexth trie
															// whose height is
															// height
		for (int x = 0; x < 26; x++) {
			if (t.subtries[x] == null)
				continue;
			if (t.subtries[x].height >= height) {
				if (index == 0)
					return x;
				else
					index--;
			}

		}
		return -1; // return -1 if none found

	}

	public String findWord(int length) {// finds the first word of length
										// length, returns null otherwise
		boolean done = false;
		String word = "";
		int index = 0;
		int currentheight = 0;
		Trie root = this;
		while (!done) {
			int t = scanRow(root, length-1, index); // find the first trie
														// with the correct
														// height.
			
			
			System.out.println(word);
			if (t == -1) {
				word = word.substring(0, currentheight ); 
				if(root.parent == null) return null;
				root = root.parent;
				
				currentheight--;
				index++;
				continue;
			}
			root = root.subtries[t]; // move down one
			
			currentheight++; // increase the height.
			word += (char) ((char) t + 'A') + ""; // add the letter to the word
			if (currentheight == length-1) { // if we've reached the correct
											// length of word
				if (root.subtries[t].endofWord) { // if its actually a word
					return word;
				} else {
					word = word.substring(0, currentheight - 1); // delete the
																	// last
																	// letter
																	// given
					if(root.parent == null) return null;
					root = root.parent;// move up one
					currentheight--; 
					index++; // move the index one over

				}
			}

		}
		return null;
	}

	public void insert(String s) { // inserts String into root trie;
		s = s.toUpperCase();
		Trie root = this;
		for (int x = 0; x < s.length(); x++) {
			if (root.subtries[s.charAt(x) - 'A'] == null) {
				root.subtries[s.charAt(x) - 'A'] = new Trie(root);

			}
			root = root.subtries[s.charAt(x) - 'A']; // go down one path
		}

		root.endofWord = true; // mark it as the end of the word

	}

	public boolean search(String s) {// returns true if the String is found
		s = s.toUpperCase();
		Trie root = this;
		for (int x = 0; x < s.length(); x++) {
			if (root.subtries[s.charAt(x) - 'A'] == null) {
				return false;
			}
			root = root.subtries[s.charAt(x) - 'A'];

		}
		return root.endofWord;
	}

	public static void main(String[] args) { // testing function- will delete
												// later
		Trie t = new Trie();
		t.insert("HELLO");

		t.insert("a");
		t.insert("goodbye");
		t.updateHeights();


		System.out.println(t.findWord(5));

	}

}
